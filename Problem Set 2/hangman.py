# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    flag = True
    for letter in secret_word:
        if letter not in letters_guessed:
            flag = False
            break
    return flag        



def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    result = ''
    for letter in secret_word:
        if letter in letters_guessed:
            result += letter
        else:
            result += '_ '
    return result



def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # import string
    result = ''
    for letter in string.ascii_lowercase:
        if letter not in letters_guessed:
            result += letter 
    return result
 
def unique_words(secret_word):
    '''
    Parameters
    ----------
    secret_word : string
        word generated by computer or users

    Returns
    -------
    the number of unique words in secret word

    '''
    num = 0
    for letter in string.ascii_lowercase:
        if letter in secret_word:
            num += 1
    return num


 

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    print('Welcome to the game Hangman!')
    print('I am thinking of a word that is',len(secret_word), 'letters long.')
    print('You have 3 warnings left.')
        
    guesses_remaining = 6
    warnings_remaining = 3
    flag = False
    letters_guessed = ''
    #现在如果输入bb，不能识别出错误
    while not flag:
        print('-------------')
        if guesses_remaining <= 0:
            print('Sorry, you ran out of guesses. The word was',\
                  secret_word + '.')
            break
        print('You have', guesses_remaining, 'guesses left.')
        print('Available letters:', get_available_letters(letters_guessed))
        inputletter = input('Please guess a letter: ')
        if not str.isalpha(inputletter):
            warnings_remaining -= 1 #现在这个变量可以不断地变小
            if warnings_remaining == -1:
                print('Oops! That is not a valid letter. You have no warnings',\
                      'left so you lose one guess:', get_guessed_word\
                          (secret_word, letters_guessed))
                guesses_remaining -= 1
            else:
                print('Oops! That is not a valid letter. You have', \
                warnings_remaining, 'warnings left')
        else:
            inputletter = str.lower(inputletter)
            if inputletter in letters_guessed:
                warnings_remaining -= 1
                if warnings_remaining == -1:
                    print('Oops! You\'ve already guessed that letter. You',\
                          'have no warnings left so you lose one guess:',\
                              get_guessed_word(secret_word, letters_guessed))
                    guesses_remaining -= 1
                else:
                    print('Oops! You\'ve already guessed that letter.',\
                          'You now have', warnings_remaining, 'warnings left: ',\
                              get_guessed_word(secret_word, letters_guessed))
            else:
                letters_guessed += inputletter
                if inputletter in secret_word:
                    print('Good guess: ', get_guessed_word(secret_word, \
                                                           letters_guessed))
                    if is_word_guessed(secret_word, letters_guessed):
                        print('-------------')
                        print('Congratulations, you won!')
                        print('Your total score for this game is: ',\
                              guesses_remaining*unique_words(secret_word))
                        flag = True
                else:
                    print('Oops! That letter is not in my word: ',\
                          get_guessed_word(secret_word, letters_guessed))
                    if inputletter in 'aeiou':
                        deductpoint = 2
                    else:
                        deductpoint = 1
                    guesses_remaining -= deductpoint
                    if guesses_remaining <= 0:
                        print('Sorry, you ran out of guesses. The word was',\
                              secret_word + '.')
                        flag = True
            

# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    my_word = my_word.replace(' ','')
    empty_letter = []
    if len(my_word) != len(other_word):
        return False
    else:
        for i in range(len(my_word)):
            if my_word[i] == '_':
                empty_letter.append(other_word[i])
            else:
                if my_word[i] in empty_letter:
                    return False
                else:
                    if my_word[i] == other_word[i]:
                        flag = True
                    else:
                        return False
    return flag



def show_possible_matches(my_word, letters_guessed):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.
    
    yamchips added: letters_guessed, string, record the letter guessed, in order to 
                    eliminate this situation: 
                    user already guessed letter 'are', and s/he got the result
                    re_ _ _ e, and s/he asked for a hint, the function may print 
                    'retake', but that's not right because 'a' has been guessed 
    '''
    my_word = my_word.replace(' ','')
    result = []
    # 这是没有用到match_with_gaps的算法，我自己写的
    # for word in wordlist:
    #     if len(word) == len(myword):
    #         emptyletter = []
    #         for i in range(len(word)):
    #             if myword[i] == '_':
    #                 emptyletter.append(word[i])
    #             else:
    #                 if myword[i] != word[i]:
    #                     flag = False
    #                     break
    #                 else:
    #                     if word[i] in emptyletter:
    #                         flag = False
    #                         break
    #                     else:
    #                         flag = True
    #         if flag:
    #             result.append(word)
    #试试用3a的函数写一下
    for word in wordlist:
        if match_with_gaps(my_word, word):
            result.append(word)
    #in letters_guessed, delete right letters, if the wrong letters appear in
    #result, delete that word
    right_letter = ''
    for letter in my_word:
        if letter != '_':
            right_letter += letter
    wrong_letter = ''   
    for letter in letters_guessed:
        if letter not in right_letter:
            wrong_letter += letter
    result_origin = result[:]
    for letter in wrong_letter:
        for i in range(len(result_origin)):
            if letter in result_origin[i]:
                result.pop(i)
   
    if result == []:
        print('No matches found')
    else:
        print(result)

    



def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    print('Welcome to the game Hangman!')
    print('I am thinking of a word that is',len(secret_word), 'letters long.')
    print('You have 3 warnings left.')
        
    guesses_remaining = 6
    warnings_remaining = 3
    flag = False
    letters_guessed = ''
    
    while not flag:
        print('-------------')
        if guesses_remaining <= 0:
            print('Sorry, you ran out of guesses. The word was',\
                  secret_word + '.')
            break
        print('You have', guesses_remaining, 'guesses left.')
        print('Available letters:', get_available_letters(letters_guessed))
        inputletter = input('Please guess a letter: ')
        if not str.isalpha(inputletter):
            if inputletter == '*':
                show_possible_matches(get_guessed_word(secret_word, letters_guessed),\
                                      letters_guessed)
            else:
                warnings_remaining -= 1 
                if warnings_remaining == -1:
                    print('Oops! That is not a valid letter. You have no warnings',\
                          'left so you lose one guess:', get_guessed_word\
                              (secret_word, letters_guessed))
                    guesses_remaining -= 1
                else:
                    if warnings_remaining > -1:
                        print('Oops! That is not a valid letter. You have', \
                        warnings_remaining, 'warnings left')
                    else:
                        print('Oops! You have made too many mistakes, please',\
                              'start again.')
                        break
        else:
            inputletter = str.lower(inputletter)
            if len(inputletter) > 1:
                print('Oops! You can only input 1 letter, please try again.')
            else:
                if inputletter in letters_guessed:
                    warnings_remaining -= 1
                    if warnings_remaining == -1:
                        print('Oops! You\'ve already guessed that letter. You',\
                              'have no warnings left so you lose one guess:',\
                                  get_guessed_word(secret_word, letters_guessed))
                        guesses_remaining -= 1
                    else:
                        if warnings_remaining > -1:
                            print('Oops! You\'ve already guessed that letter.',\
                                  'You now have', warnings_remaining, 'warnings left: ',\
                                      get_guessed_word(secret_word, letters_guessed))
                        else:
                            print('Oops! You have made too many mistakes, please',\
                                  'start again.')
                            break
                else:
                    letters_guessed += inputletter
                    if inputletter in secret_word:
                        print('Good guess: ', get_guessed_word(secret_word, \
                                                               letters_guessed))
                        if is_word_guessed(secret_word, letters_guessed):
                            print('-------------')
                            print('Congratulations, you won!')
                            print('Your total score for this game is: ',\
                                  guesses_remaining*unique_words(secret_word))
                            flag = True
                    else:
                        print('Oops! That letter is not in my word: ',\
                              get_guessed_word(secret_word, letters_guessed))
                        if inputletter in 'aeiou':
                            deductpoint = 2
                        else:
                            deductpoint = 1
                        guesses_remaining -= deductpoint
                        if guesses_remaining <= 0:
                            print('-------------')
                            print('Sorry, you ran out of guesses. The word was',\
                                  secret_word + '.')
                            flag = True
    




# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
    # pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
    # secret_word = choose_word(wordlist)
    # hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    secret_word = choose_word(wordlist)
    # secret_word = 'refine'
    hangman_with_hints(secret_word)
